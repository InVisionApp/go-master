// Code generated by counterfeiter. DO NOT EDIT.
package fakebackend

import (
	"context"
	"sync"

	"github.com/InVisionApp/go-master/backend"
)

type FakeMasterLock struct {
	LockStub        func(ctx context.Context, info *backend.MasterInfo) error
	lockMutex       sync.RWMutex
	lockArgsForCall []struct {
		ctx  context.Context
		info *backend.MasterInfo
	}
	lockReturns struct {
		result1 error
	}
	lockReturnsOnCall map[int]struct {
		result1 error
	}
	UnLockStub        func(ctx context.Context, masterID string) error
	unLockMutex       sync.RWMutex
	unLockArgsForCall []struct {
		ctx      context.Context
		masterID string
	}
	unLockReturns struct {
		result1 error
	}
	unLockReturnsOnCall map[int]struct {
		result1 error
	}
	WriteHeartbeatStub        func(ctx context.Context, info *backend.MasterInfo) error
	writeHeartbeatMutex       sync.RWMutex
	writeHeartbeatArgsForCall []struct {
		ctx  context.Context
		info *backend.MasterInfo
	}
	writeHeartbeatReturns struct {
		result1 error
	}
	writeHeartbeatReturnsOnCall map[int]struct {
		result1 error
	}
	StatusStub        func(ctx context.Context) (*backend.MasterInfo, error)
	statusMutex       sync.RWMutex
	statusArgsForCall []struct {
		ctx context.Context
	}
	statusReturns struct {
		result1 *backend.MasterInfo
		result2 error
	}
	statusReturnsOnCall map[int]struct {
		result1 *backend.MasterInfo
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMasterLock) Lock(ctx context.Context, info *backend.MasterInfo) error {
	fake.lockMutex.Lock()
	ret, specificReturn := fake.lockReturnsOnCall[len(fake.lockArgsForCall)]
	fake.lockArgsForCall = append(fake.lockArgsForCall, struct {
		ctx  context.Context
		info *backend.MasterInfo
	}{ctx, info})
	fake.recordInvocation("Lock", []interface{}{ctx, info})
	fake.lockMutex.Unlock()
	if fake.LockStub != nil {
		return fake.LockStub(ctx, info)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.lockReturns.result1
}

func (fake *FakeMasterLock) LockCallCount() int {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return len(fake.lockArgsForCall)
}

func (fake *FakeMasterLock) LockArgsForCall(i int) (context.Context, *backend.MasterInfo) {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return fake.lockArgsForCall[i].ctx, fake.lockArgsForCall[i].info
}

func (fake *FakeMasterLock) LockReturns(result1 error) {
	fake.LockStub = nil
	fake.lockReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMasterLock) LockReturnsOnCall(i int, result1 error) {
	fake.LockStub = nil
	if fake.lockReturnsOnCall == nil {
		fake.lockReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.lockReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMasterLock) UnLock(ctx context.Context, masterID string) error {
	fake.unLockMutex.Lock()
	ret, specificReturn := fake.unLockReturnsOnCall[len(fake.unLockArgsForCall)]
	fake.unLockArgsForCall = append(fake.unLockArgsForCall, struct {
		ctx      context.Context
		masterID string
	}{ctx, masterID})
	fake.recordInvocation("UnLock", []interface{}{ctx, masterID})
	fake.unLockMutex.Unlock()
	if fake.UnLockStub != nil {
		return fake.UnLockStub(ctx, masterID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unLockReturns.result1
}

func (fake *FakeMasterLock) UnLockCallCount() int {
	fake.unLockMutex.RLock()
	defer fake.unLockMutex.RUnlock()
	return len(fake.unLockArgsForCall)
}

func (fake *FakeMasterLock) UnLockArgsForCall(i int) (context.Context, string) {
	fake.unLockMutex.RLock()
	defer fake.unLockMutex.RUnlock()
	return fake.unLockArgsForCall[i].ctx, fake.unLockArgsForCall[i].masterID
}

func (fake *FakeMasterLock) UnLockReturns(result1 error) {
	fake.UnLockStub = nil
	fake.unLockReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMasterLock) UnLockReturnsOnCall(i int, result1 error) {
	fake.UnLockStub = nil
	if fake.unLockReturnsOnCall == nil {
		fake.unLockReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unLockReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMasterLock) WriteHeartbeat(ctx context.Context, info *backend.MasterInfo) error {
	fake.writeHeartbeatMutex.Lock()
	ret, specificReturn := fake.writeHeartbeatReturnsOnCall[len(fake.writeHeartbeatArgsForCall)]
	fake.writeHeartbeatArgsForCall = append(fake.writeHeartbeatArgsForCall, struct {
		ctx  context.Context
		info *backend.MasterInfo
	}{ctx, info})
	fake.recordInvocation("WriteHeartbeat", []interface{}{ctx, info})
	fake.writeHeartbeatMutex.Unlock()
	if fake.WriteHeartbeatStub != nil {
		return fake.WriteHeartbeatStub(ctx, info)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.writeHeartbeatReturns.result1
}

func (fake *FakeMasterLock) WriteHeartbeatCallCount() int {
	fake.writeHeartbeatMutex.RLock()
	defer fake.writeHeartbeatMutex.RUnlock()
	return len(fake.writeHeartbeatArgsForCall)
}

func (fake *FakeMasterLock) WriteHeartbeatArgsForCall(i int) (context.Context, *backend.MasterInfo) {
	fake.writeHeartbeatMutex.RLock()
	defer fake.writeHeartbeatMutex.RUnlock()
	return fake.writeHeartbeatArgsForCall[i].ctx, fake.writeHeartbeatArgsForCall[i].info
}

func (fake *FakeMasterLock) WriteHeartbeatReturns(result1 error) {
	fake.WriteHeartbeatStub = nil
	fake.writeHeartbeatReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMasterLock) WriteHeartbeatReturnsOnCall(i int, result1 error) {
	fake.WriteHeartbeatStub = nil
	if fake.writeHeartbeatReturnsOnCall == nil {
		fake.writeHeartbeatReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeHeartbeatReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMasterLock) Status(ctx context.Context) (*backend.MasterInfo, error) {
	fake.statusMutex.Lock()
	ret, specificReturn := fake.statusReturnsOnCall[len(fake.statusArgsForCall)]
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct {
		ctx context.Context
	}{ctx})
	fake.recordInvocation("Status", []interface{}{ctx})
	fake.statusMutex.Unlock()
	if fake.StatusStub != nil {
		return fake.StatusStub(ctx)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.statusReturns.result1, fake.statusReturns.result2
}

func (fake *FakeMasterLock) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeMasterLock) StatusArgsForCall(i int) context.Context {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return fake.statusArgsForCall[i].ctx
}

func (fake *FakeMasterLock) StatusReturns(result1 *backend.MasterInfo, result2 error) {
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 *backend.MasterInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeMasterLock) StatusReturnsOnCall(i int, result1 *backend.MasterInfo, result2 error) {
	fake.StatusStub = nil
	if fake.statusReturnsOnCall == nil {
		fake.statusReturnsOnCall = make(map[int]struct {
			result1 *backend.MasterInfo
			result2 error
		})
	}
	fake.statusReturnsOnCall[i] = struct {
		result1 *backend.MasterInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeMasterLock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	fake.unLockMutex.RLock()
	defer fake.unLockMutex.RUnlock()
	fake.writeHeartbeatMutex.RLock()
	defer fake.writeHeartbeatMutex.RUnlock()
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMasterLock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backend.MasterLock = new(FakeMasterLock)
