// Code generated by counterfeiter. DO NOT EDIT.
package syncfakes

import (
	"sync"

	"github.com/InVisionApp/go-master/backend/mongo"
)

type FakeRWLocker struct {
	RLockStub          func()
	rLockMutex         sync.RWMutex
	rLockArgsForCall   []struct{}
	RUnlockStub        func()
	rUnlockMutex       sync.RWMutex
	rUnlockArgsForCall []struct{}
	LockStub           func()
	lockMutex          sync.RWMutex
	lockArgsForCall    []struct{}
	UnlockStub         func()
	unlockMutex        sync.RWMutex
	unlockArgsForCall  []struct{}
	invocations        map[string][][]interface{}
	invocationsMutex   sync.RWMutex
}

func (fake *FakeRWLocker) RLock() {
	fake.rLockMutex.Lock()
	fake.rLockArgsForCall = append(fake.rLockArgsForCall, struct{}{})
	fake.recordInvocation("RLock", []interface{}{})
	fake.rLockMutex.Unlock()
	if fake.RLockStub != nil {
		fake.RLockStub()
	}
}

func (fake *FakeRWLocker) RLockCallCount() int {
	fake.rLockMutex.RLock()
	defer fake.rLockMutex.RUnlock()
	return len(fake.rLockArgsForCall)
}

func (fake *FakeRWLocker) RUnlock() {
	fake.rUnlockMutex.Lock()
	fake.rUnlockArgsForCall = append(fake.rUnlockArgsForCall, struct{}{})
	fake.recordInvocation("RUnlock", []interface{}{})
	fake.rUnlockMutex.Unlock()
	if fake.RUnlockStub != nil {
		fake.RUnlockStub()
	}
}

func (fake *FakeRWLocker) RUnlockCallCount() int {
	fake.rUnlockMutex.RLock()
	defer fake.rUnlockMutex.RUnlock()
	return len(fake.rUnlockArgsForCall)
}

func (fake *FakeRWLocker) Lock() {
	fake.lockMutex.Lock()
	fake.lockArgsForCall = append(fake.lockArgsForCall, struct{}{})
	fake.recordInvocation("Lock", []interface{}{})
	fake.lockMutex.Unlock()
	if fake.LockStub != nil {
		fake.LockStub()
	}
}

func (fake *FakeRWLocker) LockCallCount() int {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return len(fake.lockArgsForCall)
}

func (fake *FakeRWLocker) Unlock() {
	fake.unlockMutex.Lock()
	fake.unlockArgsForCall = append(fake.unlockArgsForCall, struct{}{})
	fake.recordInvocation("Unlock", []interface{}{})
	fake.unlockMutex.Unlock()
	if fake.UnlockStub != nil {
		fake.UnlockStub()
	}
}

func (fake *FakeRWLocker) UnlockCallCount() int {
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	return len(fake.unlockArgsForCall)
}

func (fake *FakeRWLocker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.rLockMutex.RLock()
	defer fake.rLockMutex.RUnlock()
	fake.rUnlockMutex.RLock()
	defer fake.rUnlockMutex.RUnlock()
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	fake.unlockMutex.RLock()
	defer fake.unlockMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRWLocker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mongo.RWLocker = new(FakeRWLocker)
